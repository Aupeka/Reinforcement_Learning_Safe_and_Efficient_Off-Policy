{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z-BMzu-pbz7C"
      },
      "source": [
        "## **Reinforcement Learning : Safe and Efficient Off-Policy**\n",
        "\n",
        "\n",
        "The aim of this code is to implement the algorithms mentioned in the paper \" Safe and efficient off-policy reinforcement learning \" by RÃ©mi Munos, Thomas Stepleton, Anna Harutyunyan and Marc G. Bellemare."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7sp0pc9T-x9N"
      },
      "source": [
        "\n",
        "\n",
        "##**0. Install dependecies**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xe1kklZJ_JN_"
      },
      "outputs": [],
      "source": [
        "!pip install gym\n",
        "!pip install os\n",
        "!pip install IPython\n",
        "!pip install matplotlib"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n9RaNyheb9p8"
      },
      "source": [
        "First we import the necessary modules:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yBs5FvKLcDei"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import gym\n",
        "import random\n",
        "from gym.spaces.discrete import Discrete\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython import display as ipythondisplay\n",
        "import os"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0_Z9LkYncNOT"
      },
      "source": [
        "##**1. Main functions**\n",
        "\n",
        "We first need to write a function that computes the different traces of the operator (coefficients cs), depending on the choice of the algorithm (4 possibilities)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aZal0vPo3aTb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "41851662-bb46-4d51-f30e-6f8fe9f5bca6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        }
      ],
      "source": [
        "def traces(alg, pi, mu, lam):\n",
        "    # alg: IS, Off-policy, TB or Retrace\n",
        "    if alg == \"IS\":\n",
        "        return pi / mu\n",
        "    elif alg == \"Off-policy\":\n",
        "        return lam\n",
        "    elif alg == \"TB\":\n",
        "        return lam * pi\n",
        "    elif alg == \"Retrace\":\n",
        "        return lam * min(1, pi / mu)\n",
        "    else:\n",
        "        raise ValueError(\"Unknown algorithm: {}\".format(alg))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EOCvglHdabSW"
      },
      "source": [
        "We write a function that simulates the training of a reinforcement learning algorithm in a given environment\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "r9dJ3csraNdo"
      },
      "outputs": [],
      "source": [
        "# Set up virtual display\n",
        "#os.system(\"Xvfb :1 -screen 0 1024x768x24 &\")\n",
        "#os.environ['DISPLAY'] = ':1'\n",
        "#il faut: pip install pyvirtualdisplay EasyProcess\n",
        "\n",
        "\n",
        "def simulator(env, alg=\"Retrace\", epsilon=0.2, decay_rate=0.99, total_episodes=30000, max_steps=1000, lam=0.9, gamma=0.99):\n",
        "    \"\"\"\n",
        "    Simulate the training of a reinforcement learning algorithm in a given environment.\n",
        "\n",
        "    Parameters:\n",
        "    env : object\n",
        "        The environment object with defined states, actions, rewards, and transitions.\n",
        "    alg : str, optional\n",
        "        The reinforcement learning algorithm to use. Default is \"Retrace\".\n",
        "    epsilon : float, optional\n",
        "        The exploration rate for epsilon-greedy policy. Default is 0.2.\n",
        "    decay_rate : float, optional\n",
        "        The rate at which epsilon decays over episodes. Default is 0.99.\n",
        "    total_episodes : int, optional\n",
        "        The total number of episodes for training. Default is 30000.\n",
        "    max_steps : int, optional\n",
        "        The maximum number of steps per episode. Default is 1000.\n",
        "    lam : float, optional\n",
        "        Lambda parameter for eligibility traces. Default is 0.9.\n",
        "    gamma : float, optional\n",
        "        Discount factor for future rewards. Default is 0.99.\n",
        "\n",
        "    Returns:\n",
        "    tuple\n",
        "        A tuple containing the list of total rewards per episode and the final Q-table, or the average total rewards.\n",
        "    \"\"\"\n",
        "\n",
        "    # Environment parameters\n",
        "    n_actions = env.action_space.n\n",
        "    n_states = env.observation_space.n\n",
        "    Q = np.zeros((n_states, n_actions))  # Initialize the Q matrix\n",
        "    rewards = []  # List of rewards\n",
        "\n",
        "    for episode in range(total_episodes):\n",
        "        state = env.reset()\n",
        "        #env.render(mode='rgb_array') # Show the initial frame\n",
        "        step = 0\n",
        "        cs = 1\n",
        "        rewards_tot = 0\n",
        "        while step < max_steps:\n",
        "            step += 1\n",
        "            # Epsilon-greedy strategy: exploration-exploitation\n",
        "            mu = 1\n",
        "            # Case 1: Exploitation\n",
        "            if np.random.rand() > epsilon:\n",
        "                action = np.argmax(Q[state, :]) # Most likely action for exploitation\n",
        "                mu = 1 - epsilon\n",
        "            # Case 2: Exploration\n",
        "            else:\n",
        "                action = env.action_space.sample() # Random action for exploration\n",
        "                mu = epsilon / n_actions\n",
        "\n",
        "            # Environment interaction with the selected action: we get the next state, the reward, if the game is over\n",
        "            next_state, reward, done, _ = env.step(action)\n",
        "\n",
        "            # Update probabilities\n",
        "            next_a = np.argmax(Q[next_state,:])\n",
        "            prob = [epsilon / n_actions for _ in range(n_actions)]\n",
        "            prob[next_a]+= 1 - epsilon #Total prob : n_actions * (epsilon / n_actions) + 1 - epsilon = 1\n",
        "\n",
        "            # Update Q-value\n",
        "            q_value = Q[state, action]  # Current Q-value\n",
        "            #next_q_value = np.max(Q[next_state])  # Maximum Q-value in the next state\n",
        "            E_piQ =np.dot(prob, Q[next_state]) # Compute E_pi Q\n",
        "            td_target = reward + gamma * E_piQ  # Temporal diff target\n",
        "            td_error = td_target - q_value  # Temporal diff error\n",
        "            cs *= traces(alg=alg, mu=mu, pi=prob[next_a], lam=lam) # Coefficients cs\n",
        "            Q[state, action] += (gamma ** step) * cs * td_error  # Update Q-value\n",
        "\n",
        "            # Update reward\n",
        "            rewards_tot += reward\n",
        "\n",
        "            # Update state\n",
        "            state = next_state\n",
        "\n",
        "          # Check if the episode has terminated: if 'done' is True, the episode has ended\n",
        "            if done:\n",
        "                break     # exit the loop to end the current episode and proceed to the next.\n",
        "\n",
        "        if (episode + 1) % 500 == 0:\n",
        "          print(\"Episode\", episode + 1, \"completed.\")\n",
        "\n",
        "      # Decay epsilon\n",
        "        epsilon *= decay_rate\n",
        "\n",
        "       # Append rewards\n",
        "        rewards.append(rewards_tot)\n",
        "    # Close the environement\n",
        "    env.close()\n",
        "    return rewards, Q #for the first simulations\n",
        "    #return sum(rewards)/len(rewards) #for the last simulations"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pLlaC2QpjsSC"
      },
      "source": [
        "##**2. Visualization**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fnE5VFM-7ffD"
      },
      "outputs": [],
      "source": [
        "# Test on a given env:\n",
        "\n",
        "\n",
        "env=gym.make('CliffWalking-v0')\n",
        "#env=gym.make('FrozenLake-v1')\n",
        "\n",
        "# Algorithm: IS (1)\n",
        "rewards_is, Q_is = simulator(env, alg=\"IS\")\n",
        "\n",
        "\n",
        "# Algorithm: Off-policy (2)\n",
        "rewards_off_policy, Q_off_policy = simulator(env, alg=\"Off-policy\")\n",
        "\n",
        "\n",
        "# Algorithm: TB (3)\n",
        "rewards_tb, Q_tb = simulator(env, alg=\"TB\")\n",
        "\n",
        "\n",
        "# Algorithm: Retrace (4)\n",
        "rewards_retrace, Q_retrace = simulator(env, alg=\"Retrace\")\n",
        "\n",
        "\n",
        "# Clearer\n",
        "plt.plot(range(0, len(rewards_is), 500), rewards_is[::500], label=\"IS\")\n",
        "plt.plot(range(0, len(rewards_off_policy), 500), rewards_off_policy[::500], label=\"Off-policy\")\n",
        "plt.plot(range(0, len(rewards_tb), 500), rewards_tb[::500], label=\"TB\")\n",
        "plt.plot(range(0, len(rewards_retrace), 500), rewards_retrace[::500], label=\"Retrace\")\n",
        "\n",
        "plt.title('Rewards per episode (CliffWalking-v0)')\n",
        "plt.xlabel('episode number')\n",
        "plt.ylabel('Total reward')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# For Frozen Lake\n",
        "# Plot rewards of each policy at the end using rewards every 500 episodes\n",
        "plt.plot(range(0, len(rewards_is), 500), rewards_is[::500], label=\"IS\")\n",
        "plt.plot(range(0, len(rewards_off_policy), 500), rewards_off_policy[::500], label=\"Off-policy\")\n",
        "plt.plot(range(0, len(rewards_tb), 500), rewards_tb[::500], label=\"TB\")\n",
        "plt.plot(range(0, len(rewards_retrace), 500), rewards_retrace[::500], label=\"Retrace\")\n",
        "\n",
        "# Finalize the plot\n",
        "plt.title('Rewards per episode (FrozenLake-v1)')\n",
        "plt.xlabel('Episode number')\n",
        "plt.ylabel('Total reward')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zJjEGmMESiEI"
      },
      "outputs": [],
      "source": [
        "env=gym.make('CliffWalking-v0')\n",
        "#env=gym.make('FrozenLake-v1')\n",
        "\n",
        "# Larger number of simulations\n",
        "num_simulations = 10\n",
        "\n",
        "rewards_is_all = []\n",
        "rewards_off_policy_all = []\n",
        "rewards_tb_all = []\n",
        "rewards_retrace_all = []\n",
        "\n",
        "\n",
        "for _ in range(num_simulations):\n",
        "    rewards_is, _ = simulator(env, alg=\"IS\")\n",
        "    rewards_is_all.append(rewards_is)\n",
        "\n",
        "    rewards_off_policy, _ = simulator(env, alg=\"Off-policy\")\n",
        "    rewards_off_policy_all.append(rewards_off_policy)\n",
        "\n",
        "    rewards_tb, _ = simulator(env, alg=\"TB\")\n",
        "    rewards_tb_all.append(rewards_tb)\n",
        "\n",
        "    rewards_retrace, _ = simulator(env, alg=\"Retrace\")\n",
        "    rewards_retrace_all.append(rewards_retrace)\n",
        "\n",
        "\n",
        "mean_rewards_is = np.mean(rewards_is_all, axis=0)\n",
        "mean_rewards_off_policy = np.mean(rewards_off_policy_all, axis=0)\n",
        "mean_rewards_tb = np.mean(rewards_tb_all, axis=0)\n",
        "mean_rewards_retrace = np.mean(rewards_retrace_all, axis=0)\n",
        "\n",
        "# Visualisations\n",
        "plt.plot(range(0, len(mean_rewards_is), 500), mean_rewards_is[::500], label=\"IS\")\n",
        "plt.plot(range(0, len(mean_rewards_off_policy), 500), mean_rewards_off_policy[::500], label=\"Off-policy\")\n",
        "plt.plot(range(0, len(mean_rewards_tb), 500), mean_rewards_tb[::500], label=\"TB\")\n",
        "plt.plot(range(0, len(mean_rewards_retrace), 500), mean_rewards_retrace[::500], label=\"Retrace\")\n",
        "\n",
        "plt.title('Rewards per episode - Average over {} simulations'.format(num_simulations))\n",
        "plt.xlabel('Episode number')\n",
        "plt.ylabel('Total reward')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ftRrBXh502kE"
      },
      "source": [
        "Let's take a closer look at the effects of model parameters. In particular, that of lambda and epsilon."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "I7YPqAM_00zL"
      },
      "outputs": [],
      "source": [
        "# Parameter comparison\n",
        "\n",
        "env=gym.make('CliffWalking-v0')\n",
        "\n",
        "l_algo = [\"Off-policy\",\"TB\",\"Retrace\", \"IS\"]\n",
        "l_lambda = [0, 0.1, 0.3, 0.5, 0.7, 0.9, 1] #Used for the value of lambda, epsilon and decay_rate\n",
        "l_reward = np.zeros(shape=(len(l_lambda), len(l_algo)))\n",
        "\n",
        "  # lambda (epsilon = 0.3)\n",
        "##for i in range (len(l_lambda)):\n",
        "  ###for j in range (3,4):\n",
        "    ###l_reward[i,j]=simulator(env, alg=l_algo[j], lam=l_lambda[i])\n",
        "\n",
        "  # epsilon (lambda = 0.9)\n",
        "#for i in range (len(l_lambda)):\n",
        "  #print(\"epsilon = \", l_lambda[i])\n",
        "  #for j in range (len(l_algo)):\n",
        "    #l_reward[i,j]=simulator(env, alg=l_algo[j], epsilon=l_lambda[i])\n",
        "\n",
        "  # decay_rate (epsilon = 0.2)\n",
        "for i in range (len(l_lambda)):\n",
        "  print(\"decay_rate = \", l_lambda[i])\n",
        "  for j in range (len(l_algo)):\n",
        "    l_reward[i,j]=simulator(env, alg=l_algo[j], decay_rate=l_lambda[i])\n",
        "\n",
        "#print(l_reward)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "k1_FWDkdYMX-",
        "outputId": "a9e9697e-89a8-404c-863d-d8b0e34091bc"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "## Display of our results\n",
        "\n",
        "# Definitions\n",
        "\n",
        "  #epsilon\n",
        "#l_reward = [[  -20.6677   -20.6677   -20.6677   -13.3374], [  -21.4768   -29.5663   -22.1838 -1000.6151], [  -24.2118   -38.3016   -26.4791 -1001.0344], [  -24.1847   -54.48     -24.1677 -1001.6217], [  -29.8044   -64.9644   -32.1153 -1003.3479], [  -38.454    -80.1554   -36.8383 -1009.031 ], [  -42.2448   -86.3302   -42.5134 -1016.3555]]\n",
        "\n",
        "  #Decay_rate\n",
        "#l_reward =\n",
        "\n",
        "reward_print = np.matrix(l_reward)\n",
        "lambda_print = np.array(l_lambda)\n",
        "\n",
        "# Display\n",
        "for i in range(reward_print.shape[1]):  # Utilisation de la dimension correcte\n",
        "    plt.plot(lambda_print, reward_print[:, i], label=l_algo[i])\n",
        "\n",
        "# Label\n",
        "plt.xlabel('decay_rate')\n",
        "plt.ylabel('Algorithms')\n",
        "plt.title('Algorithmic performance in function of decay_rate for epsilon = 0.2')\n",
        "plt.legend()\n",
        "\n",
        "# show\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9XtIRtVgakx6"
      },
      "source": [
        "##**3. Let's play the game**\n",
        "\n",
        "Now that the training is done, we can use the Q-values matrix to play the game with the trained agent.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "rb0vFDXwanP8",
        "outputId": "d81f221d-661d-4b92-a397-bf2c70c6fc62"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Game over.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import IPython.display as ipythondisplay\n",
        "\n",
        "# Set up virtual display\n",
        "os.system(\"Xvfb :1 -screen 0 1024x768x24 &\")\n",
        "os.environ['DISPLAY'] = ':1'\n",
        "\n",
        "def play_game(env, Q):\n",
        "    \"\"\"\n",
        "    Play the game with the trained agent using the Q-values matrix.\n",
        "\n",
        "    Parameters:\n",
        "    env : object\n",
        "        The environment object with defined states, actions, rewards, and transitions.\n",
        "    Q : array\n",
        "        The Q-values matrix.\n",
        "\n",
        "    Returns:\n",
        "    None\n",
        "    \"\"\"\n",
        "\n",
        "    observation = env.reset()\n",
        "    img = plt.imshow(env.render(mode='rgb_array')) # Show the initial frame\n",
        "\n",
        "    state = env.reset()\n",
        "    step = 0\n",
        "    done = False\n",
        "    env.render(mode='rgb_array') # Show the initial frame\n",
        "    ipythondisplay.clear_output(wait=True)\n",
        "    ipythondisplay.display(plt.gcf())\n",
        "\n",
        "    while not done:\n",
        "        step += 1\n",
        "        action = np.argmax(Q[state, :])\n",
        "        next_state, reward, done, _ = env.step(action)\n",
        "        img.set_data(env.render(mode='rgb_array')) # Update the visualization\n",
        "        ipythondisplay.clear_output(wait=True)\n",
        "        ipythondisplay.display(plt.gcf())\n",
        "        ipythondisplay.clear_output(wait=True)\n",
        "        state = next_state\n",
        "\n",
        "        if done:\n",
        "            break\n",
        "\n",
        "\n",
        "    print(\"Game over.\")\n",
        "    env.close()\n",
        "\n",
        "\n",
        "# Play the game with the trained agent and compare the results of the different algorithms\n",
        "play_game(env, Q_retrace)\n",
        "#play_game(env, Q_tb)\n",
        "#play_game(env, Q_off_policy)\n",
        "#play_game(env, Q_is)\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "7sp0pc9T-x9N",
        "0_Z9LkYncNOT",
        "pLlaC2QpjsSC",
        "9XtIRtVgakx6"
      ]
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
